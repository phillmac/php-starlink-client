<?php

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex_api/telemetron/public/common/time.proto

namespace SpaceX\API\Telemetron\PBPublic\Common;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>SpaceX.API.Telemetron.Public.Common.TimestampInfo</code>
 */
class TimestampInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional .SpaceX.API.Telemetron.Public.Common.Epoch epoch = 1 [json_name = "epoch"];</code>
     */
    protected $epoch = null;

    /**
     * Generated from protobuf field <code>optional int64 nanoseconds = 2 [json_name = "nanoseconds"];</code>
     */
    protected $nanoseconds = null;

    /**
     * Constructor.
     *
     * @param  array  $data  {
     *                       Optional. Data for populating the Message object.
     *
     * @type int $epoch
     * @type int|string $nanoseconds
     *                  }
     */
    public function __construct($data = null)
    {
        \GPBMetadata\SpacexApi\Telemetron\PBPublic\Common\Time::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional .SpaceX.API.Telemetron.Public.Common.Epoch epoch = 1 [json_name = "epoch"];</code>
     *
     * @return int
     */
    public function getEpoch()
    {
        return isset($this->epoch) ? $this->epoch : 0;
    }

    public function hasEpoch()
    {
        return isset($this->epoch);
    }

    public function clearEpoch()
    {
        unset($this->epoch);
    }

    /**
     * Generated from protobuf field <code>optional .SpaceX.API.Telemetron.Public.Common.Epoch epoch = 1 [json_name = "epoch"];</code>
     *
     * @param  int  $var
     * @return $this
     */
    public function setEpoch($var)
    {
        GPBUtil::checkEnum($var, \SpaceX\API\Telemetron\PBPublic\Common\Epoch::class);
        $this->epoch = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional int64 nanoseconds = 2 [json_name = "nanoseconds"];</code>
     *
     * @return int|string
     */
    public function getNanoseconds()
    {
        return isset($this->nanoseconds) ? $this->nanoseconds : 0;
    }

    public function hasNanoseconds()
    {
        return isset($this->nanoseconds);
    }

    public function clearNanoseconds()
    {
        unset($this->nanoseconds);
    }

    /**
     * Generated from protobuf field <code>optional int64 nanoseconds = 2 [json_name = "nanoseconds"];</code>
     *
     * @param  int|string  $var
     * @return $this
     */
    public function setNanoseconds($var)
    {
        GPBUtil::checkInt64($var);
        $this->nanoseconds = $var;

        return $this;
    }
}
