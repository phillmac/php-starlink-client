<?php

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex_api/device/wifi_config.proto

namespace SpaceX\API\Device;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>SpaceX.API.Device.AckSuppression</code>
 */
class AckSuppression extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional uint32 ack_mark = 1 [json_name = "ackMark"];</code>
     */
    protected $ack_mark = null;

    /**
     * Generated from protobuf field <code>optional float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
     */
    protected $htb_ack_queue_rate = null;

    /**
     * Generated from protobuf field <code>optional float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
     */
    protected $htb_ack_queue_ceil = null;

    /**
     * Generated from protobuf field <code>optional float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
     */
    protected $cake_queue_bandwidth = null;

    /**
     * Generated from protobuf field <code>optional bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
     */
    protected $cake_ack_filter_aggressive = null;

    /**
     * Generated from protobuf field <code>optional float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
     */
    protected $cake_manual_rtt = null;

    /**
     * Constructor.
     *
     * @param  array  $data  {
     *                       Optional. Data for populating the Message object.
     *
     * @type int $ack_mark
     * @type float $htb_ack_queue_rate
     * @type float $htb_ack_queue_ceil
     * @type float $cake_queue_bandwidth
     * @type bool $cake_ack_filter_aggressive
     * @type float $cake_manual_rtt
     *             }
     */
    public function __construct($data = null)
    {
        \GPBMetadata\SpacexApi\Device\WifiConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional uint32 ack_mark = 1 [json_name = "ackMark"];</code>
     *
     * @return int
     */
    public function getAckMark()
    {
        return isset($this->ack_mark) ? $this->ack_mark : 0;
    }

    public function hasAckMark()
    {
        return isset($this->ack_mark);
    }

    public function clearAckMark()
    {
        unset($this->ack_mark);
    }

    /**
     * Generated from protobuf field <code>optional uint32 ack_mark = 1 [json_name = "ackMark"];</code>
     *
     * @param  int  $var
     * @return $this
     */
    public function setAckMark($var)
    {
        GPBUtil::checkUint32($var);
        $this->ack_mark = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
     *
     * @return float
     */
    public function getHtbAckQueueRate()
    {
        return isset($this->htb_ack_queue_rate) ? $this->htb_ack_queue_rate : 0.0;
    }

    public function hasHtbAckQueueRate()
    {
        return isset($this->htb_ack_queue_rate);
    }

    public function clearHtbAckQueueRate()
    {
        unset($this->htb_ack_queue_rate);
    }

    /**
     * Generated from protobuf field <code>optional float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
     *
     * @param  float  $var
     * @return $this
     */
    public function setHtbAckQueueRate($var)
    {
        GPBUtil::checkFloat($var);
        $this->htb_ack_queue_rate = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
     *
     * @return float
     */
    public function getHtbAckQueueCeil()
    {
        return isset($this->htb_ack_queue_ceil) ? $this->htb_ack_queue_ceil : 0.0;
    }

    public function hasHtbAckQueueCeil()
    {
        return isset($this->htb_ack_queue_ceil);
    }

    public function clearHtbAckQueueCeil()
    {
        unset($this->htb_ack_queue_ceil);
    }

    /**
     * Generated from protobuf field <code>optional float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
     *
     * @param  float  $var
     * @return $this
     */
    public function setHtbAckQueueCeil($var)
    {
        GPBUtil::checkFloat($var);
        $this->htb_ack_queue_ceil = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
     *
     * @return float
     */
    public function getCakeQueueBandwidth()
    {
        return isset($this->cake_queue_bandwidth) ? $this->cake_queue_bandwidth : 0.0;
    }

    public function hasCakeQueueBandwidth()
    {
        return isset($this->cake_queue_bandwidth);
    }

    public function clearCakeQueueBandwidth()
    {
        unset($this->cake_queue_bandwidth);
    }

    /**
     * Generated from protobuf field <code>optional float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
     *
     * @param  float  $var
     * @return $this
     */
    public function setCakeQueueBandwidth($var)
    {
        GPBUtil::checkFloat($var);
        $this->cake_queue_bandwidth = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
     *
     * @return bool
     */
    public function getCakeAckFilterAggressive()
    {
        return isset($this->cake_ack_filter_aggressive) ? $this->cake_ack_filter_aggressive : false;
    }

    public function hasCakeAckFilterAggressive()
    {
        return isset($this->cake_ack_filter_aggressive);
    }

    public function clearCakeAckFilterAggressive()
    {
        unset($this->cake_ack_filter_aggressive);
    }

    /**
     * Generated from protobuf field <code>optional bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
     *
     * @param  bool  $var
     * @return $this
     */
    public function setCakeAckFilterAggressive($var)
    {
        GPBUtil::checkBool($var);
        $this->cake_ack_filter_aggressive = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
     *
     * @return float
     */
    public function getCakeManualRtt()
    {
        return isset($this->cake_manual_rtt) ? $this->cake_manual_rtt : 0.0;
    }

    public function hasCakeManualRtt()
    {
        return isset($this->cake_manual_rtt);
    }

    public function clearCakeManualRtt()
    {
        unset($this->cake_manual_rtt);
    }

    /**
     * Generated from protobuf field <code>optional float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
     *
     * @param  float  $var
     * @return $this
     */
    public function setCakeManualRtt($var)
    {
        GPBUtil::checkFloat($var);
        $this->cake_manual_rtt = $var;

        return $this;
    }
}
